{"version":3,"file":"static/js/976.bc92cefb.chunk.js","mappings":"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","sources":["components/plotly/Plotly.js","pages/DemoApi.js"],"sourcesContent":["// react\nimport { useState, useEffect, useRef } from \"react\";\n\n// plotly\nimport P from \"plotly.js-dist\";\n\nexport default function Plotly(props) {\n  // unpack props\n  const data = props.data;\n  const height = props.height;\n  const maxHeight = props.maxHeight;\n  const width = props.width;\n  const maxWidth = props.maxWidth;\n  const title = props.title;\n\n  // plotly variables\n  const plotlyRef = useRef(null);\n  const [layout, setLayout] = useState({\n    height: maxHeight ? Math.min(maxHeight, height): height,\n    width: maxWidth ? Math.min(maxWidth, width) : width,\n    title: title,\n    plot_bgcolor: \"rgba(0, 0, 0, 0)\",\n    paper_bgcolor: \"rgba(0, 0, 0, 0)\",\n  });\n\n  // refresh plotly on data or layout change (layout width || height)\n  useEffect(() => {\n    P.react(plotlyRef.current, [data], layout);\n  }, [data, layout]);\n\n  // resize handler on window.resize\n  const handleResize = () => {\n    setLayout({\n      ...layout,\n      height: maxHeight ? Math.min(maxHeight, plotlyRef.current.clientHeight) : plotlyRef.current.clientHeight,\n      width: maxWidth ? Math.min(maxWidth, plotlyRef.current.clientWidth) : plotlyRef.current.clientWidth,\n    });\n  };\n\n  // initialize plotly and resize events\n  // !!! disabled eslint, because only initial data state needed to initialize plotly !!!\n  useEffect(() => {\n    // initialize plotly\n    P.newPlot(plotlyRef.current, [data], layout);\n\n    // set size handler\n    window.addEventListener(\"resize\", handleResize);\n\n    // clean event handlers\n    return () => {\n      window.removeEventListener(\"resize\", handleResize);\n    };\n  }, []); // eslint-disable-line\n\n  return (\n    <div ref={plotlyRef} style={{ margin: \"3px\" }} />\n  );\n};\n","// react\nimport { useState, useEffect } from \"react\";\n\n// mui\nimport { Box } from \"@mui/material\";\n\n// plotly\nimport Plotly from \"../components/plotly/Plotly.js\";\n\nfunction getRequest(props) {\n  // unpack props\n  const { url, setState } = props;\n\n  fetch(url)\n  .then(response => {\n    if (response.status > 400) {\n      throw new Error(response.status + \" \" + response.statusText);\n    }\n    return response.json();\n  })\n  .then(json => setState(json))\n  .catch(ERR => console.log(ERR))\n}\n\nexport default function DemoApiPage() {\n  const domain = window.location.hostname === \"localhost\" ? `http://${process.env.REACT_APP_GODADDY_IP}:3000/` : process.env.REACT_APP_ADDRESS;\n  const [memoryApi, setMemoryApi] = useState({});\n  const [freemem, setFreemem] = useState(0);\n  const [totalmem, setTotalmem] = useState(0);\n  const [spaceApi, setSpaceApi] = useState({});\n  const [freespace, setFreespace] = useState(0);\n  const [totalspace, setTotalspace] = useState(0);\n  const [data, setData] = useState([{}]);\n\n  // get api\n  useEffect(() => {\n    getRequest({\n      url: domain + \"api/godaddy/memory\",\n      setState: setMemoryApi\n    });\n    getRequest({\n      url: domain + \"api/godaddy/space\",\n      setState: setSpaceApi\n    });\n  }, []);\n\n  useEffect(() => {\n    if (memoryApi && Object.keys(memoryApi).includes(\"freemem\")) {\n      setFreemem(memoryApi.freemem);\n    }\n    if (memoryApi && Object.keys(memoryApi).includes(\"totalmem\")) {\n      setTotalmem(memoryApi.totalmem);\n    }\n  }, [memoryApi]);\n\n  useEffect(() => {\n    if (spaceApi && Object.keys(spaceApi).includes(\"freespace\")) {\n      setFreespace(spaceApi.freespace);\n    }\n    if (memoryApi && Object.keys(spaceApi).includes(\"totalspace\")) {\n      setTotalspace(spaceApi.totalspace);\n    }\n  }, [spaceApi]);\n\n  useEffect(() => {\n    setData({\n      ...data,\n      values: [freemem, totalmem - freemem],\n      labels: [\"freeMem\", \"usedMem\"],\n      type: \"pie\"\n    })\n  }, [freemem, totalmem]);\n\n  return (\n    <Box>\n      <p>{JSON.stringify(memoryApi)}</p>\n      <p>{JSON.stringify(spaceApi)}</p>\n      <Plotly\n        data={data}\n        title={\"Memory\"}\n      />\n    </Box>\n  );\n};\n"],"names":["Plotly","props","data","height","maxHeight","width","maxWidth","title","plotlyRef","useRef","layout","setLayout","useState","Math","min","plot_bgcolor","paper_bgcolor","useEffect","P","current","handleResize","clientHeight","clientWidth","window","addEventListener","removeEventListener","_jsx","ref","style","margin","getRequest","url","setState","fetch","then","response","status","Error","statusText","json","catch","ERR","console","log","DemoApiPage","domain","location","hostname","concat","process","memoryApi","setMemoryApi","freemem","setFreemem","totalmem","setTotalmem","spaceApi","setSpaceApi","freespace","setFreespace","totalspace","setTotalspace","setData","Object","keys","includes","values","labels","type","_jsxs","Box","children","JSON","stringify"],"sourceRoot":""}