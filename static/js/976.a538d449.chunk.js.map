{"version":3,"file":"static/js/976.a538d449.chunk.js","mappings":"6LAMe,SAASA,EAAOC,GAE7B,MAAMC,EAAOD,EAAMC,KACbC,EAASF,EAAME,OACfC,EAAYH,EAAMG,UAClBC,EAAQJ,EAAMI,MACdC,EAAWL,EAAMK,SACjBC,EAAQN,EAAMM,MAGdC,GAAYC,EAAAA,EAAAA,QAAO,OAClBC,EAAQC,IAAaC,EAAAA,EAAAA,UAAS,CACnCT,OAAQC,EAAYS,KAAKC,IAAIV,EAAWD,GAASA,EACjDE,MAAOC,EAAWO,KAAKC,IAAIR,EAAUD,GAASA,EAC9CE,MAAOA,EACPQ,aAAc,mBACdC,cAAe,sBAIjBC,EAAAA,EAAAA,YAAU,KACRC,IAAAA,MAAQV,EAAUW,QAAS,CAACjB,GAAOQ,EAAO,GACzC,CAACR,EAAMQ,IAGV,MAAMU,EAAeA,KACnBT,EAAU,IACLD,EACHP,OAAQC,EAAYS,KAAKC,IAAIV,EAAWI,EAAUW,QAAQE,cAAgBb,EAAUW,QAAQE,aAC5FhB,MAAOC,EAAWO,KAAKC,IAAIR,EAAUE,EAAUW,QAAQG,aAAed,EAAUW,QAAQG,aACxF,EAkBJ,OAbAL,EAAAA,EAAAA,YAAU,KAERC,IAAAA,QAAUV,EAAUW,QAAS,CAACjB,GAAOQ,GAGrCa,OAAOC,iBAAiB,SAAUJ,GAG3B,KACLG,OAAOE,oBAAoB,SAAUL,EAAa,IAEnD,KAGDM,EAAAA,EAAAA,KAAA,OAAKC,IAAKnB,EAAWoB,MAAO,CAAEC,OAAQ,QAE1C,C,2FChDe,SAASC,IACtB,MAAMC,EAAmC,cAA7BR,OAAOS,SAASC,SAA2B,+BAAiC,gCACjFC,EAAKC,IAAUvB,EAAAA,EAAAA,UAAS,CAAC,IACzBwB,EAASC,IAAczB,EAAAA,EAAAA,UAAS,IAChC0B,EAAUC,IAAe3B,EAAAA,EAAAA,UAAS,IAClCV,EAAMsC,IAAW5B,EAAAA,EAAAA,UAAS,CAAC,CAAC,IAmCnC,OAjCAK,EAAAA,EAAAA,YAAU,KACRwB,MAAMV,EAAM,cAAe,CACzBW,OAAQ,MACRC,KAAM,SAEPC,MAAKC,IACJ,GAAIA,EAASC,OAAS,IACpB,MAAM,IAAIC,MAAMF,EAASC,OAAS,IAAMD,EAASG,YAEnD,OAAOH,EAASI,MAAM,IAEvBL,MAAKK,GAAQd,EAAOc,KACpBC,OAAMC,GAAOC,QAAQC,IAAIF,IAAK,GAC9B,KAEHlC,EAAAA,EAAAA,YAAU,KACJiB,GAAOoB,OAAOC,KAAKrB,GAAKsB,SAAS,YACnCnB,EAAWH,EAAIE,QAAU,KAEvBF,GAAOoB,OAAOC,KAAKrB,GAAKsB,SAAS,aACnCjB,EAAYL,EAAII,SAAW,IAC7B,GACC,CAACJ,KAEJjB,EAAAA,EAAAA,YAAU,KACRuB,EAAQ,IACHtC,EACHuD,OAAQ,CAACrB,EAASE,EAAWF,GAC7BsB,OAAQ,CAAC,UAAW,WACpBC,KAAM,OACN,GACD,CAACvB,EAASE,KAGXsB,EAAAA,EAAAA,MAACC,EAAAA,EAAG,CAAAC,SAAA,CACDC,KAAKC,UAAU9B,GACfI,GACDZ,EAAAA,EAAAA,KAAC1B,EAAAA,EAAM,CACLE,KAAMA,EACNK,MAAO,aAIf,C","sources":["components/plotly/Plotly.js","pages/DemoApi.js"],"sourcesContent":["// react\nimport { useState, useEffect, useRef } from \"react\";\n\n// plotly\nimport P from \"plotly.js-dist\";\n\nexport default function Plotly(props) {\n  // unpack props\n  const data = props.data;\n  const height = props.height;\n  const maxHeight = props.maxHeight;\n  const width = props.width;\n  const maxWidth = props.maxWidth;\n  const title = props.title;\n\n  // plotly variables\n  const plotlyRef = useRef(null);\n  const [layout, setLayout] = useState({\n    height: maxHeight ? Math.min(maxHeight, height): height,\n    width: maxWidth ? Math.min(maxWidth, width) : width,\n    title: title,\n    plot_bgcolor: \"rgba(0, 0, 0, 0)\",\n    paper_bgcolor: \"rgba(0, 0, 0, 0)\",\n  });\n\n  // refresh plotly on data or layout change (layout width || height)\n  useEffect(() => {\n    P.react(plotlyRef.current, [data], layout);\n  }, [data, layout]);\n\n  // resize handler on window.resize\n  const handleResize = () => {\n    setLayout({\n      ...layout,\n      height: maxHeight ? Math.min(maxHeight, plotlyRef.current.clientHeight) : plotlyRef.current.clientHeight,\n      width: maxWidth ? Math.min(maxWidth, plotlyRef.current.clientWidth) : plotlyRef.current.clientWidth,\n    });\n  };\n\n  // initialize plotly and resize events\n  // !!! disabled eslint, because only initial data state needed to initialize plotly !!!\n  useEffect(() => {\n    // initialize plotly\n    P.newPlot(plotlyRef.current, [data], layout);\n\n    // set size handler\n    window.addEventListener(\"resize\", handleResize);\n\n    // clean event handlers\n    return () => {\n      window.removeEventListener(\"resize\", handleResize);\n    };\n  }, []); // eslint-disable-line\n\n  return (\n    <div ref={plotlyRef} style={{ margin: \"3px\" }} />\n  );\n};\n","// react\nimport { useState, useEffect } from \"react\";\n\n// mui\nimport { Box } from \"@mui/material\";\n\n// plotly\nimport Plotly from \"../components/plotly/Plotly.js\";\n\nexport default function DemoApiPage() {\n  const url = window.location.hostname === \"localhost\" ? \"http://208.109.228.202:3000/\" : \"https://toolatefortacos.com/\";\n  const [api, setApi] = useState({});\n  const [freeMem, setFreeMem] = useState(0);\n  const [totalMem, setTotalMem] = useState(0);\n  const [data, setData] = useState([{}]);\n\n  useEffect(() => {\n    fetch(url + \"api/godaddy\", {\n      method: \"GET\",\n      mode: \"cors\",\n    })\n    .then(response => {\n      if (response.status > 400) {\n        throw new Error(response.status + \" \" + response.statusText);\n      }\n      return response.json();\n    })\n    .then(json => setApi(json))\n    .catch(ERR => console.log(ERR))\n  }, [])\n\n  useEffect(() => {\n    if (api && Object.keys(api).includes(\"freeMem\")) {\n      setFreeMem(api.freeMem / 1000000);\n    }\n    if (api && Object.keys(api).includes(\"totalMem\")) {\n      setTotalMem(api.totalMem / 1000000);\n    }\n  }, [api])\n\n  useEffect(() => {\n    setData({\n      ...data,\n      values: [freeMem, totalMem - freeMem],\n      labels: [\"freeMem\", \"usedMem\"],\n      type: \"pie\"\n    })\n  }, [freeMem, totalMem])\n\n  return (\n    <Box>\n      {JSON.stringify(api)}\n      {totalMem}\n      <Plotly\n        data={data}\n        title={\"Memory\"}\n      />\n    </Box>\n  )\n};\n"],"names":["Plotly","props","data","height","maxHeight","width","maxWidth","title","plotlyRef","useRef","layout","setLayout","useState","Math","min","plot_bgcolor","paper_bgcolor","useEffect","P","current","handleResize","clientHeight","clientWidth","window","addEventListener","removeEventListener","_jsx","ref","style","margin","DemoApiPage","url","location","hostname","api","setApi","freeMem","setFreeMem","totalMem","setTotalMem","setData","fetch","method","mode","then","response","status","Error","statusText","json","catch","ERR","console","log","Object","keys","includes","values","labels","type","_jsxs","Box","children","JSON","stringify"],"sourceRoot":""}